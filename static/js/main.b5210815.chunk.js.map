{"version":3,"sources":["components/Column/index.js","components/AddNewModal/index.js","components/Task/index.js","App.js","serviceWorker.js","index.js"],"names":["Column","_ref","column","handleAddNewTask","children","react_default","a","createElement","className","_","get","size","onClick","AddNewModal","props","handleToggleModal","type","checked","selectedColumn","onChange","handleChangeSelectedColumn","placeholder","value","taskContent","handleChangeTaskContent","disabled","concat","Task","react_beautiful_dnd_esm","index","draggableId","task","id","isDragDisabled","isEditing","provided","Object","assign","draggableProps","dragHandleProps","ref","innerRef","defaultValue","content","handleEdit","handleCancelEdit","react","time","handleChooseEditTask","handleDeleteTask","App","state","displayModal","editingColumnIndex","editingTaskIndex","editedTaskId","columns","cloneDeep","title","tasks","choosenColumn","arguments","length","undefined","_this","setState","prevState","e","target","isEmpty","handleChangeeditingColumnIndex","trim","toastr","warning","timeOut","_this$state","newTask","uuidv1","Date","toLocaleString","columnIndex","findIndex","push","updatedColumn","localStorage","setItem","JSON","stringify","taskIndex","splice","success","taskId","_this$state2","handleSaveDrag","result","source","destination","reason","sourceColumnIndex","droppableId","destinationColumnIndex","update","getItem","this","parse","_this2","_this$state3","onDragEnd","map","components_Column","key","droppableProps","style","minHeight","components_Task","components_AddNewModal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5210815.chunk.js","sourcesContent":["import _ from 'lodash';\r\nimport React from 'react';\r\n\r\nimport './style.scss';\r\n\r\nconst Column = ({ column, handleAddNewTask, children }) => (\r\n  <div className=\"Column\">\r\n    <div className=\"Column__header\">\r\n      <h2 className=\"Column__title\">\r\n        <span className=\"Column__item-count\">{_.get(column, 'tasks').size}</span>\r\n        <span className=\"Column__text\">{_.get(column, 'title')}</span>\r\n      </h2>\r\n      <p className=\"Column__btn\" onClick={handleAddNewTask(_.get(column, 'id'))}>\r\n        <i className=\"fas fa-plus\"></i> New task\r\n      </p>\r\n    </div>\r\n    <div className=\"Column__content\">{children}</div>\r\n  </div>\r\n);\r\n\r\nexport default Column;\r\n","import React from 'react';\r\n\r\nimport './style.scss';\r\n\r\nconst AddNewModal = (props) => (\r\n  <div className=\"AddNewModal\">\r\n    <div className=\"AddNewModal__backdrop\" onClick={props.handleToggleModal}></div>\r\n    <div className=\"AddNewModal__content\">\r\n      <h4 className=\"AddNewModal__title\">CREATE NEW TASK</h4>\r\n      <div className=\"AddNewModal__task-status\">\r\n        <span className=\"AddNewModal__radio\">\r\n          <input type=\"radio\" checked={props.selectedColumn === 'td'} onChange={props.handleChangeSelectedColumn('td')} />\r\n          <span onClick={props.handleChangeSelectedColumn('td')}>TODO</span>\r\n        </span>\r\n        <span className=\"AddNewModal__radio\">\r\n          <input type=\"radio\" checked={props.selectedColumn === 'ip'} onChange={props.handleChangeSelectedColumn('ip')} />\r\n          <span onClick={props.handleChangeSelectedColumn('ip')}>IN PROGRESS</span>\r\n        </span>\r\n        <span className=\"AddNewModal__radio\">\r\n          <input type=\"radio\" checked={props.selectedColumn === 'de'} onChange={props.handleChangeSelectedColumn('de')}></input>\r\n          <span onClick={props.handleChangeSelectedColumn('de')}>DONE</span>\r\n        </span>\r\n      </div>\r\n      <div className=\"AddNewModal__task\">\r\n        <input className=\"AddNewModal__input\" type=\"text\" placeholder=\"Enter your task...\" value={props.taskContent} onChange={props.handleChangeTaskContent} />\r\n      </div>\r\n      <div className=\"AddNewModal__action\">\r\n        <button disabled={props.disabled} className={`AddNewModal__btn AddNewModal__btn--${props.disabled ? 'disable' : 'confirm'}`} onClick={props.handleAddNewTask}>\r\n          Save\r\n        </button>\r\n        <button className=\"AddNewModal__btn AddNewModal__btn--cancel\" onClick={props.handleToggleModal}>\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default AddNewModal;\r\n","import React, { Fragment } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport './style.scss';\r\n\r\nconst Task = (props) => (\r\n  <Draggable index={props.index} draggableId={props.task.id} isDragDisabled={props.isEditing}>\r\n    {(provided) => (\r\n      <div className=\"Task\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n        {props.isEditing ? (\r\n          <div className=\"Task__editing\">\r\n            <input type=\"text\" className=\"Task__editor\" defaultValue={props.task.content} onChange={props.handleChangeTaskContent} />\r\n            <div className=\"Task__editing-action\">\r\n              <i className=\"fas fa-check\" onClick={props.handleEdit}></i>\r\n              <i className=\"fas fa-ban\" onClick={props.handleCancelEdit}></i>\r\n            </div>\r\n            <div className=\"Task__editing-bgr\" onClick={props.handleCancelEdit}></div>\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <div className=\"Task__time\">\r\n              <i className=\"far fa-calendar-alt\"></i> {props.task.time}\r\n            </div>\r\n            <div className=\"Task__main\">\r\n              <div className=\"Task__content\">{props.task.content}</div>\r\n              <div className=\"Task__action\">\r\n                <div className=\"Task__btn\" onClick={props.handleChooseEditTask}>\r\n                  <i className=\"far fa-edit\"></i>\r\n                </div>\r\n                <div className=\"Task__btn\" onClick={props.handleDeleteTask}>\r\n                  <i className=\"far fa-trash-alt\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    )}\r\n  </Draggable>\r\n);\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\nimport toastr from 'toastr';\r\nimport 'toastr/build/toastr.min.css';\r\nimport uuidv1 from 'uuid/v1';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport './style.scss';\r\nimport Column from './components/Column/';\r\nimport AddNewModal from './components/AddNewModal/';\r\nimport Task from './components/Task/';\r\nimport _ from 'lodash';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    displayModal: false,\r\n    editingColumnIndex: '',\r\n    taskContent: '',\r\n    editingTaskIndex: null,\r\n    editedTaskId: null,\r\n    disabled: true,\r\n    columns: _.cloneDeep([\r\n      { id: 'td', title: 'TO DO', tasks: [] },\r\n      { id: 'ip', title: 'IN PROGRESS', tasks: [] },\r\n      { id: 'de', title: 'DONE', tasks: [] },\r\n    ]),\r\n  };\r\n\r\n  componentDidMount() {\r\n    const columns = localStorage.getItem('columns');\r\n    if (columns) {\r\n      this.setState({ columns: _.cloneDeep(JSON.parse(columns)) });\r\n    }\r\n  }\r\n\r\n  handleToggleModal = (choosenColumn = '') => () => {\r\n    this.setState((prevState) => ({\r\n      displayModal: !prevState.displayModal,\r\n      selectedColumn: choosenColumn,\r\n    }));\r\n  };\r\n\r\n  handleChangeTaskContent = (e) =>\r\n    this.setState({ taskContent: e.target.value }, () => {\r\n      this.setState({ disabled: _.isEmpty(this.state.taskContent) ? true : false });\r\n    });\r\n\r\n  handleChangeeditingColumnIndex = (editingColumnIndex) => () => this.setState({ editingColumnIndex: editingColumnIndex });\r\n\r\n  handleAddNewTask = () => {\r\n    const { taskContent } = this.state;\r\n    if (taskContent.trim() === '') {\r\n      toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\r\n    } else {\r\n      const { selectedColumn, columns } = this.state;\r\n      const newTask = _.cloneDeep({\r\n        id: uuidv1(),\r\n        content: taskContent,\r\n        time: new Date().toLocaleString(),\r\n      });\r\n      const columnIndex = columns.findIndex((column) => _.get(column, 'id') === selectedColumn);\r\n      columns[columnIndex].tasks.push(newTask);\r\n      const updatedColumn = _.cloneDeep(columns);\r\n      this.setState(\r\n        {\r\n          displayModal: false,\r\n          selectedColumn: '',\r\n          taskContent: '',\r\n          columns: _.cloneDeep(updatedColumn),\r\n        },\r\n        () => {\r\n          localStorage.setItem('columns', JSON.stringify(updatedColumn));\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDeleteTask = (columnIndex, taskIndex) => () => {\r\n    const { columns } = this.state;\r\n    columns[columnIndex].tasks.splice(taskIndex, 1);\r\n    this.setState({ columns: _.cloneDeep(columns) }, () => {\r\n      localStorage.setItem('columns', JSON.stringify(_.cloneDeep(columns)));\r\n      toastr.success('Delete task success', 'Notice', { timeOut: 2000 });\r\n    });\r\n  };\r\n\r\n  handleChooseEditTask = (columnIndex, taskIndex, taskId) => () => {\r\n    this.setState({\r\n      editingColumnIndex: columnIndex,\r\n      editingTaskIndex: taskIndex,\r\n      editedTaskId: taskId,\r\n    });\r\n  };\r\n\r\n  handleChangeSelectedColumn = (selectedColumn) => () => {\r\n    this.setState({ selectedColumn: selectedColumn });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const { columns, editingColumnIndex, taskContent, editingTaskIndex } = this.state;\r\n    columns[editingColumnIndex].tasks[editingTaskIndex].content = taskContent;\r\n    this.setState(\r\n      {\r\n        editingColumnIndex: '',\r\n        taskContent: '',\r\n        editedTaskId: null,\r\n        editingTaskIndex: null,\r\n        columns: _.cloneDeep(columns),\r\n      },\r\n      () => {\r\n        localStorage.setItem('columns', JSON.stringify(_.cloneDeep(columns)));\r\n      }\r\n    );\r\n  };\r\n\r\n  handleCancelEdit = () => {\r\n    this.setState({\r\n      editingColumnIndex: '',\r\n      taskContent: '',\r\n      editedTaskId: null,\r\n      editingTaskIndex: null,\r\n    });\r\n  };\r\n\r\n  handleSaveDrag = (result) => {\r\n    const { source, destination, reason } = result;\r\n    if (reason === 'DROP' && destination) {\r\n      const { columns } = this.state;\r\n      const sourceColumnIndex = columns.findIndex((column) => _.get(column, 'id') === source.droppableId);\r\n      const task = _.get(columns, [sourceColumnIndex, 'tasks', source.index]);\r\n      columns[sourceColumnIndex].tasks.splice(source.index, 1);\r\n      let updatedColumn = _.cloneDeep(columns);\r\n      const destinationColumnIndex = columns.findIndex((column) => _.get(column, 'id') === destination.droppableId);\r\n      updatedColumn = _.update(updatedColumn, `updatedColumn[destinationColumnIndex].tasks`, () => updatedColumn[destinationColumnIndex].tasks.splice(destination.index, 0, task));\r\n      this.setState(\r\n        {\r\n          columns: _.cloneDeep(updatedColumn),\r\n        },\r\n        () => {\r\n          localStorage.setItem('columns', JSON.stringify(updatedColumn));\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { columns, displayModal, editingColumnIndex, taskContent, editedTaskId } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"App__title\">TO DO LIST</h1>\r\n        <DragDropContext onDragEnd={this.handleSaveDrag}>\r\n          <div className=\"App__content\">\r\n            {columns.map((column, columnIndex) => (\r\n              <Column key={_.get(column, 'id')} column={column} handleAddNewTask={this.handleToggleModal}>\r\n                <Droppable droppableId={_.get(column, 'id')}>\r\n                  {(provided) => (\r\n                    <div ref={provided.innerRef} {...provided.droppableProps} style={{ minHeight: '300px' }}>\r\n                      {_.get(column, 'tasks').map((task, taskIndex) => (\r\n                        <Task\r\n                          key={_.get(task, 'id')}\r\n                          index={taskIndex}\r\n                          isEditing={_.get(task, 'id') === editedTaskId}\r\n                          handleChangeTaskContent={this.handleChangeTaskContent}\r\n                          task={task}\r\n                          handleEdit={this.handleEdit}\r\n                          handleCancelEdit={this.handleCancelEdit}\r\n                          handleChooseEditTask={this.handleChooseEditTask(columnIndex, taskIndex, _.get(task, 'id'))}\r\n                          handleDeleteTask={this.handleDeleteTask(columnIndex, taskIndex)}\r\n                        />\r\n                      ))}\r\n\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </Column>\r\n            ))}\r\n          </div>\r\n        </DragDropContext>\r\n        {displayModal && (\r\n          <AddNewModal\r\n            disabled={this.state.disabled || _.isEmpty(taskContent)}\r\n            editingColumnIndex={editingColumnIndex}\r\n            taskContent={taskContent}\r\n            handleChangeTaskContent={this.handleChangeTaskContent}\r\n            handleChangeeditingColumnIndex={this.handleChangeeditingColumnIndex}\r\n            handleAddNewTask={this.handleAddNewTask}\r\n            handleToggleModal={this.handleToggleModal()}\r\n            selectedColumn={this.state.selectedColumn}\r\n            handleChangeSelectedColumn={this.handleChangeSelectedColumn}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}